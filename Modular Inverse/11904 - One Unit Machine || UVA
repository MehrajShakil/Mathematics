///   BISMILLAHIR RAHMANIR RAHEEM
///   ALLAH IS WATCHING ME
///   ALLAH save us from COVID-19.Amin.

///   █▀█─█──█──█▀█─█─█
///   █▄█─█──█──█▄█─█▄█
///   █─█─█▄─█▄─█─█─█─█

///   كُلُّ نَفْسٍ ذَآئِقَةُ الْمَوْت
///   Every soul shall taste death.

/// Tag:: NT

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

///  order_of_key return number of elements less than x.
///  find_by_order return index.

using namespace std;
using namespace __gnu_pbds;


#define MOHAMMAD  ios::sync_with_stdio(0);cin.tie(0);
#define all(x)    (x).begin(), (x).end()
#define AE        cout << fixed << setprecision(10);

int dx8[] = {0, 0, 1, 1, 1, -1, -1, -1}; // 8-direction.......
int dy8[] = {1,-1, 1, -1, 0, 0, -1, 1};
int dx4[]= {1,-1,0,0}; // 4-direction...........
int dy4[]= {0,0,1,-1};

typedef tree< int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;
typedef tree<pair<int, int>,null_type,less<pair<int, int>>,rb_tree_tag,tree_order_statistics_node_update> ordered_multiset;

//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)
//***********************************************  The END **********************************************************************************************************************************
using ll = long long;
const ll N = 1000000;
const ll INF = 1e18;
const ll mod = 1000000007;

ll fact[N + 1],ifact[N + 1];

ll bigmod ( ll a , ll n , ll mod ){
          ll res = 1;
          while (n){
                if ( n&1 ) res = (res*a)%mod;
                n>>=1;
                a*=a;
                a%=mod;
          }
          return res;
}


void factorial ( ){

    fact[0] = ifact[0] = 1;

    for ( ll i = 1 ; i<=N ; ++i ){
         fact[i] = ( i * fact[i - 1] ) % mod;
         ifact[i] = bigmod ( fact[i] , mod - 2 , mod );
    }
}

bool go ( ll n , ll a , ll b ){

    while ( n ){
          ll x = n%10;
          if(x==a or x==b){
             n/=10;
             continue;
          }
          return 0;
    }
    return 1;
}

ll nCr ( ll n , ll r ){

   ll nu = fact[n];
   ll de = ( ifact[n - r] * ifact[r] ) % mod;

   return ( nu * de ) % mod;
}


int main()
{

 // MOHAMMAD
 factorial( );

 ll t , tc = 0;
 cin >> t;
 while ( t-- ){

 ll n , way = 1;
 cin >> n;
 ll arr[n];
 for ( ll i = 0 ; i<n ; ++i ) cin >> arr[i];
 ll sum = 0;
 for ( ll i = 0 ; i<n ; ++i ){
                                
     sum+=arr[i];
     way = ( ( way % mod ) * ( nCr( sum - 1 , arr[i] - 1 ) % mod ) ) % mod;
 
 }
 cout << "Case " << ++tc << ": " << way << "\n";
 }

}




/*

  let n = 1;
  then j1 j1 j1 job are same sob way = 1.
  
  let n = 2.
  then j1 j1 j2 j2.
  here j2 is fixed.
  
  so , total unit = 3.
       select = 1. ( total units of job for second - 1 ) /// here minus 1 is for last position is fixed.  
  for first job already we compute it so , now we multiple ( calculation first job ),
                ans = ans * nCr ( total unit , 1 ).


  Alhamdulillah
*/

